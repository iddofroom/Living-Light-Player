//On button Press - run one song and wait for next press
#include "SdLedsPlayer.h"
#include "state.h"
#include "SD.h"

#define LEDS_PER_STRIP 164
#define MAX_BRIGHTNESS 255
#define DEFAULT_BRIGHTNESS 50  // range is 0 (off) to 255 (max brightness)
#define STATE_DEBOUNCE_TIME 2
#define ERRORLED1 23
#define BUTTON_PIN 0

int curr_file_i = 0;
enum State back_states[] = {BACK0, BACK1, BACK2, BACK3, BACK4, BACK5, BACK6, BACK7, BACK8, BACK9, BACK10, BACK11, BACK12, BACK13, BACK14};
const char *files_iter_rr[] = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1"}; // Make sure file list is not longer than state list

enum State state, prevState = IDLE;
unsigned long currSongTime = 0, songStartTime = 0, procTime = 0;
unsigned long stateDebounceDelay = STATE_DEBOUNCE_TIME;
bool isPlaying = false;

DMAMEM int display_memory[LEDS_PER_STRIP * 6]; 
int drawing_memory[LEDS_PER_STRIP * 6];
SdLedsPlayer sd_leds_player(LEDS_PER_STRIP, display_memory, drawing_memory);
unsigned long frame_timestamp;
uint8_t brightness = DEFAULT_BRIGHTNESS; 

unsigned long lastMonitorTime = 0;
unsigned long MonitorDelay = 5000;

void setup() {
  Serial.begin(115200);
  Serial.println("Serial Port Started.");
  
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  
  while (! sd_leds_player.setup()) {
    Serial.println("SD card setup failed, fix and reset to continue");
    delay(1000);
  }
  Serial.println("SD card started.");
  sd_leds_player.setBrightness(brightness);
  Serial.print("Brightness set to: "); Serial.print(brightness); Serial.println(" out of 255.");
  
  pinMode(ERRORLED1, OUTPUT);
  digitalWrite(ERRORLED1, LOW);
  
  stateInit();
  delay(1000);

  // Initial play of file 0
  Serial.println("Playing initial file 0");
  sd_leds_player.load_file("0");
  stateEncode(BACK0);
  isPlaying = true;
}

void loop() {
  if (!sd_leds_player.is_file_playing() && isPlaying) {
    isPlaying = false;
    Serial.println("Animation finished, turning off LEDs");
    sd_leds_player.setBrightness(0); // Turn off LEDs
    Serial.println("Waiting for button press to play file 1");
  }
  
  if (!isPlaying && digitalRead(BUTTON_PIN) == LOW) {
    delay(50);
    if (digitalRead(BUTTON_PIN) == LOW) {
      Serial.println("Button pressed, playing file 1");
      sd_leds_player.setBrightness(brightness); // Restore brightness
      sd_leds_player.load_file("1");
      stateEncode(BACK1);
      isPlaying = true;
      songStartTime = millis(); // Reset song timer
    }
  }

  if (sd_leds_player.is_file_playing()) {
    currSongTime = millis() - songStartTime;
    if (currSongTime >= frame_timestamp) {
      sd_leds_player.show_next_frame();
      frame_timestamp = sd_leds_player.load_next_frame();
    }
  }

  // State tracking between two teensies
  if (state != prevState) {
    songStartTime = millis();
    stateEncode(state);
  }
  prevState = state;
  
  // Holding non IDLE state for a short while so we can use debounce on second teensy to capture state safely
  if (state != IDLE) {
    if ((millis() - songStartTime) > stateDebounceDelay) {
      state = IDLE;
      songStartTime = millis();
    }
  }
}
